{"version":3,"sources":["app/models/pagination.ts","app/api/agent.ts","app/models/activity.ts","app/models/profile.ts","app/stores/activityStore.ts","app/stores/profileStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","app/layout/NavBar.tsx","features/activities/dashboard/ActivityFilters.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/form/TextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","app/layout/LoadingComponents.tsx","app/common/form/TextArea.tsx","app/common/form/SelectInput.tsx","app/common/options/categoryOptions.ts","app/common/form/DateInput.tsx","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetails.tsx","features/errors/TestError.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modals/ModalContainer.tsx","features/profiles/ProfileEditForm.tsx","features/profiles/ProfileAbout.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileFollowings.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoWidgetDropzone.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/common/util/hooks.ts","features/users/RegisterSuccess.tsx","features/users/ConfirmEmail.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","toast","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","startsWith","userStore","logout","setServerError","Promise","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","id","create","activity","update","attend","Account","current","login","user","register","fbLogin","accessToken","refreshToken","verifyEmail","email","resendEmailConfirm","Profiles","username","updateProfile","profile","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateFollowing","listFollowings","predicate","listActivities","Activity","init","Object","assign","ActivityFormValues","undefined","title","category","description","date","city","venue","Profile","displayName","image","ActivityStore","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","pagingParams","set","setPagingParams","setPredicate","value","resetPredicate","forEach","loadActivities","axiosParams","result","setActivity","setPagination","setLoadingInitial","console","log","loadActivity","getActivity","runInAction","isGoing","attendees","some","isHost","hostUsername","host","find","x","Date","state","createActivity","attendee","newActivity","updateActivity","updatedActivity","deleteActivity","updateAttendence","filter","cancelActivityToggle","isCancelled","clearSelectedActivity","setImage","updateAttendeeFollowing","following","followersCount","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","activities","format","ProfileStore","loadingProfile","uploading","followings","loadingFollowings","activeTab","userActivities","loadingActivities","setActiveTab","loadProfile","setDisplayName","photo","photos","isMain","activityStore","p","followingCount","loadFollowings","loadUserActivities","UserStore","fbAccessToken","fbLoading","refreshTokenTimeout","creds","setToken","startRefreshTokenTimer","modalStore","closeModal","window","localStorage","removeItem","getUser","getFacebookLoginStatus","FB","getLoginStatus","authResponse","facebookLogin","apiLogin","catch","scope","stopRefreshTokenTimer","jwtToken","atob","split","timeout","exp","now","setTimeout","clearTimeout","getItem","appLoaded","setAppLoaded","setItem","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","isLoggedIn","Menu","inverted","fixed","Container","Item","as","NavLink","to","exact","header","src","alt","style","marginRight","name","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","vertical","size","width","marginTop","Header","attached","color","active","has","onChange","Reveal","animated","Content","visible","fluid","hidden","widht","basic","e","preventDefault","handleFollow","ProfileCard","Card","Description","str","length","substring","truncate","bio","extra","Icon","styles","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","circular","bordered","ActivityListItem","Segment","Group","Label","textAlign","marginBottom","secondary","clearing","floated","groupedActivities","group","sub","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","disabled","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","TextInput","props","useField","field","meta","Form","Field","touched","label","initialValues","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","placeholder","type","render","ValidationErrors","Message","err","i","validationSchema","Yup","required","isValid","dirty","Divider","LoadingComponent","Dimmer","TextArea","SelectInput","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","categoryOptions","DateInput","selected","useHistory","useParams","nullable","enableReinitialize","uuid","handleForSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","border","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","ribbon","verticalAlign","relaxed","divided","Extra","TestErrors","widths","baseUrl","primary","NotFound","Inline","message","Modal","onClose","setEditMode","isCurrentUser","Tab","Pane","panes","menuItem","pane","GridColumn","menu","onTabChange","activeIndex","handleTabChange","itemsPerRow","objectFit","Meta","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","preview","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoWidgetDropzone","setFiles","dzStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoUploadWidget","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","addPhotoMode","setAddPhotoMode","target","setTarget","currentTarget","handleSetNamePhoto","handleDeletePhoto","menuPosition","Statistic","PrivateRoute","Component","component","rest","useQuery","useLocation","search","RegisterSuccess","success","ConfirmEmail","Status","setStatus","handleConfirmEmailResend","getBody","location","finally","hideProgressBar","path","HomePage","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.c97209e8.chunk.js","sourcesContent":["export interface Pagination {\r\n    currentPage: number;\r\n    itemsPerPage: number;\r\n    totalItems: number;\r\n    totalPages: number;\r\n}\r\n\r\nexport class PaginatedResult<T> {\r\n    data: T;\r\n    pagination: Pagination;\r\n\r\n    constructor(data: T, pagination: Pagination) {\r\n        this.data = data;\r\n        this.pagination = pagination;\r\n    }\r\n}\r\n\r\nexport class PagingParams {\r\n    pageNumber;\r\n    pageSize;\r\n\r\n    constructor(pageNumber = 1, pageSize = 2) {\r\n        this.pageNumber = pageNumber;\r\n        this.pageSize = pageSize;\r\n    }\r\n}","import axios, { AxiosError, AxiosResponse } from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport { history } from '../..';\r\nimport { Activity, ActivityFormValues } from '../models/activity';\r\nimport { PaginatedResult } from '../models/pagination';\r\nimport { Photo, Profile, UserActivity } from '../models/profile';\r\nimport { User, UserFormValues } from '../models/user';\r\nimport { store } from '../stores/store';\r\n\r\nconst sleep = (delay: number) => {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, delay)\r\n    })\r\n}\r\n \r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\naxios.interceptors.request.use(config => {\r\n    const token = store.commonStore.token;\r\n    if (token) config.headers.Authorization = `Bearer ${token}`;\r\n    return config;\r\n})\r\n\r\naxios.interceptors.response.use(async response => {    \r\n    if (process.env.NODE_ENV === 'development') await sleep(1000);\r\n    const pagination = response.headers['pagination'];\r\n    if (pagination) {\r\n        response.data = new PaginatedResult(response.data, JSON.parse(pagination));\r\n        return response as AxiosResponse<PaginatedResult<any>>\r\n    }\r\n    return response;\r\n}, (error: AxiosError) => {\r\n    const {data, status, config, headers} = error.response!;\r\n    switch (status) {\r\n        case 400:\r\n            if (typeof data === 'string') {\r\n                toast.error(data);\r\n            }\r\n            if (config.method === 'get' && data.errors.hasOwnProperty('id')) {\r\n                history.push('/not-found');\r\n            }\r\n            if (data.errors) {\r\n                const modalStateErrors = [];\r\n                for (const key in data.errors) {\r\n                    if (data.errors[key]) {\r\n                        modalStateErrors.push(data.errors[key]);\r\n                    }\r\n                }\r\n                throw modalStateErrors.flat();\r\n            }\r\n            break;\r\n        case 401:\r\n            if (status === 401 && headers['www-authenticate']?.startsWith('Bearer error=\"invalid_token\"')) {\r\n                store.userStore.logout();\r\n                toast.error('Session expired - please login again');\r\n            }\r\n            break;\r\n        case 404:\r\n            history.push('/not-found');\r\n            break;\r\n        case 500:\r\n            store.commonStore.setServerError(data);\r\n            history.push('/server-error');\r\n            break;\r\n    }\r\n    return Promise.reject(error);\r\n})\r\n\r\nconst responseBody = <T> (response: AxiosResponse<T>) => response.data;\r\n\r\nconst requests = {\r\n    get: <T> (url: string) => axios.get<T>(url).then(responseBody),\r\n    post: <T> (url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\r\n    put: <T> (url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\r\n    del: <T> (url: string) => axios.delete<T>(url).then(responseBody),\r\n}\r\n\r\nconst Activities = {\r\n    list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>('/activities', {params}).then(responseBody),\r\n    details: (id: string) => requests.get<Activity>(`/activities/${id}`),\r\n    create: (activity: ActivityFormValues) => requests.post<void>('/activities', activity),\r\n    update: (activity: ActivityFormValues) => requests.put<void>(`/activities/${activity.id}`, activity),\r\n    delete: (id: string) => requests.del<void>(`/activities/${id}`),\r\n    attend: (id: string) => requests.post<void>(`/activities/${id}/attend`, {})\r\n}\r\n\r\nconst Account = {\r\n    current: () => requests.get<User>('/account'),\r\n    login: (user: UserFormValues) => requests.post<User>('/account/login', user),\r\n    register: (user: UserFormValues) => requests.post<User>('/account/register', user),\r\n    fbLogin: (accessToken: string) => requests.post<User>(`/account/fbLogin?accessToken=${accessToken}`, {}),\r\n    refreshToken: () => requests.post<User>('/account/refreshToken', {}),\r\n    verifyEmail: (token: string, email: string) => requests.post<void>(`/account/verifyEmail?token=${token}&email=${email}`, {}),\r\n    resendEmailConfirm: (email: string) => requests.get(`/account/resendEmailConfirmationLink?email=${email}`)\r\n}\r\n\r\nconst Profiles = {\r\n    get: (username: string) => requests.get<Profile>(`/profiles/${username}`),\r\n    updateProfile: (profile: Partial<Profile>) => requests.put(`/profiles`, profile),\r\n    uploadPhoto: (file: Blob) => {\r\n        let formData = new FormData();\r\n        formData.append('File', file);\r\n        return axios.post<Photo>('photos', formData, {\r\n            headers: {'Content-type':'multipart/form-data'}\r\n        })\r\n    },\r\n    setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\r\n    deletePhoto: (id: string) => requests.del(`/photos/${id}`),\r\n    updateFollowing: (username: string) => requests.post(`/follow/${username}`, {}),\r\n    listFollowings: (username: string, predicate: string) => requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\r\n    listActivities: (username: string, predicate: string) => requests.get<UserActivity[]>(`/profiles/${username}/activities?predicate=${predicate}`)\r\n}\r\n\r\nconst agent = {\r\n    Activities,\r\n    Account,\r\n    Profiles\r\n}\r\n\r\nexport default agent;","import { Profile } from \"./profile\";\r\n\r\nexport interface Activity {\r\n    id: string;\r\n    title: string;\r\n    date: Date | null;\r\n    description: string;\r\n    category: string;\r\n    city: string;\r\n    venue: string;\r\n    hostUsername: string;\r\n    isCancelled: boolean;\r\n    isGoing: boolean;\r\n    isHost: boolean;\r\n    host?: Profile;\r\n    attendees: Profile[]\r\n  }\r\n\r\n  export class Activity implements Activity {\r\n    constructor(init?: ActivityFormValues) {\r\n      Object.assign(this, init);\r\n    }\r\n  }\r\n\r\n  export class ActivityFormValues {\r\n    id?: string = undefined;\r\n    title: string = '';\r\n    category: string = '';\r\n    description: string = '';\r\n    date: Date | null = null;\r\n    city: string = '';\r\n    venue: string = '';\r\n\r\n    constructor(activity?: ActivityFormValues) {\r\n      if (activity) {\r\n        this.id = activity.id;\r\n        this.title = activity.title;\r\n        this.category = activity.category;\r\n        this.description = activity.description;\r\n        this.date = activity.date;\r\n        this.city = activity.city;\r\n        this.venue = activity.venue;\r\n      }\r\n    }\r\n  }","import { User } from \"./user\";\r\n\r\nexport interface Profile {\r\n    username: string;\r\n    displayName: string;\r\n    image?: string;\r\n    bio?: string;\r\n    followersCount: number;\r\n    followingCount: number;\r\n    following: boolean;\r\n    photos?: Photo[];\r\n}\r\n\r\nexport class Profile implements Profile {\r\n    constructor(user: User) {\r\n        this.username = user.username;\r\n        this.displayName = user.displayName;\r\n        this.image = user.image;\r\n    }\r\n}\r\n\r\nexport interface Photo {\r\n    id: string;\r\n    url: string;\r\n    isMain: boolean;\r\n}\r\n\r\nexport interface UserActivity {\r\n    id: string;\r\n    title: string;\r\n    category: string;\r\n    date: Date;\r\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Activity, ActivityFormValues } from \"../models/activity\";\r\nimport {format} from 'date-fns';\r\nimport { store } from \"./store\";\r\nimport { Profile } from \"../models/profile\";\r\nimport { Pagination, PagingParams } from \"../models/pagination\";\r\n\r\nexport default class ActivityStore {\r\n    activityRegistry = new Map<string, Activity>();\r\n    selectedActivity: Activity | undefined = undefined;\r\n    editMode = false;\r\n    loading = false;\r\n    loadingInitial = false;\r\n    pagination: Pagination | null = null;\r\n    pagingParams = new PagingParams();\r\n    predicate = new Map().set('all', true);\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n\r\n        reaction(\r\n            () => this.predicate.keys(),\r\n            () => {\r\n                this.pagingParams = new PagingParams();\r\n                this.activityRegistry.clear();\r\n                this.loadActivities();\r\n            }\r\n        )\r\n    }\r\n\r\n    setPagingParams = (pagingParams: PagingParams) => {\r\n        this.pagingParams = pagingParams;\r\n    }\r\n\r\n    setPredicate = (predicate: string, value: string | Date) => {\r\n        const resetPredicate = () => {\r\n            this.predicate.forEach((value, key) => {\r\n                if (key !== 'startDate') this.predicate.delete(key);\r\n            })\r\n        }\r\n\r\n        switch (predicate) {\r\n            case 'all':\r\n                resetPredicate();\r\n                this.predicate.set('all', true);\r\n                break;\r\n            case 'isGoing':\r\n                resetPredicate();\r\n                this.predicate.set('isGoing', true);\r\n                break;\r\n            case 'isHost':\r\n                resetPredicate();\r\n                this.predicate.set('isHost', true);\r\n                break;\r\n            case 'startDate':\r\n                this.predicate.delete('startDate');\r\n                this.predicate.set('startDate', value);\r\n        }\r\n    }\r\n\r\n    get axiosParams() {\r\n        const params = new URLSearchParams();\r\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\r\n        params.append('pageSize', this.pagingParams.pageSize.toString());\r\n        this.predicate.forEach((value, key) => {\r\n            if (key === 'startDate') {\r\n                params.append(key, (value as Date).toISOString());\r\n            } else {\r\n                params.append(key, value);\r\n            }\r\n        })\r\n        return params;\r\n    }\r\n\r\n    get activitiesByDate() {\r\n        return Array.from(this.activityRegistry.values()).sort((a, b) =>\r\n            a.date!.getTime() - b.date!.getTime());\r\n    }\r\n\r\n    get groupedActivities() {\r\n        return Object.entries(\r\n            this.activitiesByDate.reduce((activities, activity) => {\r\n                const date = format(activity.date!, 'dd MMM yyyy');\r\n                activities[date] = activities[date] ? [...activities[date], activity] : [activity];\r\n                return activities;\r\n            }, {} as {[key: string]: Activity[]})\r\n        )\r\n    }\r\n\r\n    loadActivities = async () => {\r\n        this.loadingInitial = true;\r\n        try {\r\n            const result = await agent.Activities.list(this.axiosParams);\r\n            result.data.forEach(activity => {\r\n                this.setActivity(activity);\r\n            })\r\n            this.setPagination(result.pagination);\r\n            this.setLoadingInitial(false);\r\n        } catch (error) {\r\n            console.log(error);\r\n            this.setLoadingInitial(false);\r\n        }\r\n    }\r\n\r\n    setPagination = (pagination: Pagination) => {\r\n        this.pagination = pagination;\r\n    }\r\n\r\n    loadActivity = async (id: string) => {\r\n        let activity = this.getActivity(id);\r\n        if (activity) {\r\n            this.selectedActivity = activity;\r\n            return activity;\r\n        } else {\r\n            this.loadingInitial = true;\r\n            try {\r\n                activity = await agent.Activities.details(id);\r\n                this.setActivity(activity);\r\n                runInAction(() => {\r\n                    this.selectedActivity = activity;\r\n                });\r\n                this.setLoadingInitial(false);\r\n                return activity;\r\n            } catch (error) {\r\n                console.log(error);\r\n                this.setLoadingInitial(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    private getActivity = (id: string) => {\r\n        return this.activityRegistry.get(id);\r\n    }\r\n\r\n    private setActivity = (activity: Activity) => {\r\n        const user = store.userStore.user;\r\n        if (user) {\r\n            activity.isGoing = activity.attendees!.some(\r\n                a => a.username === user.username\r\n            )\r\n            activity.isHost = activity.hostUsername === user.username;\r\n            activity.host = activity.attendees?.find(x => x.username === activity.hostUsername);\r\n        }\r\n        activity.date = new Date(activity.date!);\r\n        this.activityRegistry.set(activity.id, activity);\r\n    }\r\n\r\n    private setLoadingInitial = (state: boolean) => {\r\n        this.loadingInitial = state;\r\n    }\r\n\r\n    createActivity = async (activity: ActivityFormValues) => {\r\n        const user = store.userStore.user;\r\n        const attendee = new Profile(user!);\r\n        try {\r\n            await agent.Activities.create(activity);\r\n            const newActivity = new Activity(activity);\r\n            newActivity.hostUsername = user!.username;\r\n            newActivity.attendees = [attendee];\r\n            this.setActivity(newActivity);\r\n            runInAction(() => {\r\n                this.selectedActivity = newActivity;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    updateActivity = async (activity: ActivityFormValues) => {\r\n        try {\r\n            await agent.Activities.update(activity);\r\n            runInAction(() => {\r\n                if (activity.id) {\r\n                    let updatedActivity = {...this.getActivity(activity.id), ...activity}\r\n                    this.activityRegistry.set(activity.id, updatedActivity as Activity);\r\n                    this.selectedActivity = updatedActivity as Activity;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    deleteActivity = async (id: string) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.delete(id);\r\n            runInAction(() => {\r\n                this.activityRegistry.delete(id);\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    updateAttendence = async () => {\r\n        const user = store.userStore.user;\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                if (this.selectedActivity?.isGoing) {\r\n                    this.selectedActivity.attendees = this.selectedActivity.attendees?.filter(a => a.username !== user?.username);\r\n                    this.selectedActivity.isGoing = false;\r\n                } else {\r\n                    const attendee = new Profile(user!);\r\n                    this.selectedActivity?.attendees?.push(attendee);\r\n                    this.selectedActivity!.isGoing = true;\r\n                }\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\r\n            })\r\n        } catch (error) {\r\n\r\n        } finally {\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    cancelActivityToggle = async () => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled;\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!)\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    clearSelectedActivity = () => {\r\n        this.selectedActivity = undefined;\r\n    }\r\n\r\n    setImage = (username: string, image: string) => {\r\n        this.activityRegistry.forEach(activity => {\r\n            if(activity.hostUsername === username && activity.host?.image) activity.host.image = image;\r\n\r\n            activity.attendees.forEach(attendee => {\r\n                if (attendee.username === username && attendee.image) attendee.image = image;\r\n            });\r\n        });\r\n    }\r\n\r\n    updateAttendeeFollowing = (username: string) => {\r\n        this.activityRegistry.forEach(activity => {\r\n            activity.attendees.forEach(attendee => {\r\n                if (attendee.username === username) {\r\n                    attendee.following ? attendee.followersCount-- : attendee.followersCount++;\r\n                    attendee.following = !attendee.following;\r\n                }\r\n            })\r\n        })\r\n    }\r\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Photo, Profile, UserActivity } from \"../models/profile\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class ProfileStore {\r\n    profile: Profile | null = null;\r\n    loadingProfile = false;\r\n    uploading = false;\r\n    loading = false;\r\n    followings: Profile[] = [];\r\n    loadingFollowings = false;\r\n    activeTab = 0;\r\n    userActivities: UserActivity[] = [];\r\n    loadingActivities = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(() => this.activeTab,\r\n            activeTab => {\r\n                if (activeTab === 3 || this.activeTab === 4) {\r\n                    const predicate = this.activeTab === 3 ? 'followers' : 'following';\r\n                    this.loadFollowings(predicate);\r\n                } else {\r\n                    this.followings = [];\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setActiveTab = (activeTab: any) => {\r\n        this.activeTab = activeTab;\r\n    }\r\n\r\n    get isCurrentUser() {\r\n        if (store.userStore.user && this.profile) {\r\n            return store.userStore.user.username === this.profile.username;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    loadProfile = async (username: string) => {\r\n        this.loadingProfile = true;\r\n        try {\r\n            const profile = await agent.Profiles.get(username);\r\n            runInAction(() => {\r\n                this.profile = profile;\r\n                this.loadingProfile = false;\r\n            })\r\n        } catch(error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingProfile = false);\r\n        }\r\n    }\r\n\r\n    updateProfile = async (profile: Partial<Profile>) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateProfile(profile)\r\n            runInAction(() => {\r\n                if (profile.displayName && store.userStore.user?.displayName !== profile.displayName) {\r\n                    store.userStore.setDisplayName(profile.displayName);\r\n                }\r\n                this.profile = {...this.profile, ...profile as Profile};\r\n                this.loading = false;\r\n            })\r\n        } catch(error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    uploadPhoto = async (file: Blob) => {\r\n        this.uploading = true;\r\n        try {\r\n            const response = await agent.Profiles.uploadPhoto(file);\r\n            const photo = response.data;\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos?.push(photo);\r\n                    if (photo.isMain && store.userStore.user) {\r\n                        store.userStore.setImage(photo.url);\r\n                        store.activityStore.setImage(this.profile!.username, photo.url);\r\n                        this.profile.image = photo.url;\r\n                    }\r\n                }\r\n                this.uploading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.uploading = false);\r\n        }\r\n    }\r\n\r\n    setMainPhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.setMainPhoto(photo.id);\r\n            store.userStore.setImage(photo.url);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.photos) {\r\n                    this.profile.photos.find(p => p.isMain)!.isMain = false;\r\n                    this.profile.photos.find(p => p.id === photo.id)!.isMain = true;\r\n                    this.profile.image = photo.url;\r\n                    store.activityStore.setImage(this.profile!.username, photo.url);\r\n                    this.loading = false;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    deletePhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.deletePhoto(photo.id);\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos = this.profile.photos?.filter(p => p.id !== photo.id);\r\n                    this.loading = false;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    updateFollowing = async (username: string, following: boolean) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateFollowing(username);\r\n            store.activityStore.updateAttendeeFollowing(username);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.username !== store.userStore.user?.username\r\n                    && this.profile.username === username) {\r\n                    following ? this.profile.followersCount++ : this.profile.followersCount--;\r\n                    this.profile.following = !this.profile.following;\r\n                }\r\n                if (this.profile && this.profile.username === store.userStore.user?.username) {\r\n                    following ? this.profile.followingCount++ : this.profile.followingCount--;\r\n                }\r\n                this.followings.forEach(profile => {\r\n                    if (profile.username === username) {\r\n                        profile.following ? profile.followersCount-- : profile.followersCount++;\r\n                        profile.following = !profile.following;\r\n                    }\r\n                })\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    loadFollowings = async (predicate: string) => {\r\n        this.loadingFollowings = true;\r\n        try {\r\n            const followings = await agent.Profiles.listFollowings(this.profile!.username, predicate);\r\n            runInAction(() => {\r\n                this.followings = followings;\r\n                this.loadingFollowings = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingFollowings = false);\r\n        }\r\n    }\r\n\r\n    loadUserActivities = async (username: string, predicate?: string) => {\r\n        this.loadingActivities = true;\r\n        try {\r\n            const activities = await agent.Profiles.listActivities(username, predicate!);\r\n            runInAction(() => {\r\n                this.userActivities = activities;\r\n                this.loadingActivities = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loadingActivities = false;\r\n            })\r\n        }\r\n    }\r\n}","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { history } from \"../..\";\r\nimport agent from \"../api/agent\";\r\nimport { User, UserFormValues } from \"../models/user\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class UserStore {\r\n    user: User | null = null;\r\n    fbAccessToken: string | null = null;\r\n    fbLoading = false;\r\n    refreshTokenTimeout: any;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    get isLoggedIn() {\r\n        return !!this.user;\r\n    }\r\n\r\n    login = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.login(creds);\r\n            store.commonStore.setToken(user.token);\r\n            this.startRefreshTokenTimer(user);\r\n            runInAction(() => this.user = user);\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    logout = () => {\r\n        store.commonStore.setToken(null);\r\n        window.localStorage.removeItem('jwt');\r\n        this.user = null;\r\n        store.activityStore.activityRegistry.clear()\r\n        history.push('/');\r\n    }\r\n\r\n    getUser = async () => {\r\n        try {\r\n            const user = await agent.Account.current();\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user);\r\n            this.startRefreshTokenTimer(user);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    register = async (creds: UserFormValues) => {\r\n        try {\r\n            await agent.Account.register(creds);\r\n            history.push(`/account/registerSuccess?email=${creds.email}`);\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    setImage = (image: string) => {\r\n        if (this.user) this.user.image = image;\r\n    }\r\n\r\n    setDisplayName = (displayName: string) => {\r\n        if (this.user) this.user.displayName = displayName;\r\n    }\r\n\r\n    getFacebookLoginStatus = async () => {\r\n        window.FB.getLoginStatus(response => {\r\n            if (response.status === 'connected') {\r\n                this.fbAccessToken = response.authResponse.accessToken;\r\n            }\r\n        })\r\n    }\r\n\r\n    facebookLogin = () => {\r\n        this.fbLoading = true;\r\n        \r\n        const apiLogin = (accessToken: string) => {\r\n            agent.Account.fbLogin(accessToken).then(user => {\r\n                store.commonStore.setToken(user.token);\r\n                this.startRefreshTokenTimer(user);\r\n                runInAction(() => {\r\n                    this.user = user;\r\n                    this.fbLoading = false;\r\n                })\r\n                history.push('/activities');\r\n            }).catch(error => {\r\n                console.log(error);\r\n                runInAction(() => this.fbLoading = false);\r\n            })\r\n        }\r\n\r\n        if (this.fbAccessToken) {\r\n            apiLogin(this.fbAccessToken);\r\n        } else {\r\n            window.FB.login(response => {\r\n                apiLogin(response.authResponse.accessToken);\r\n            }, {scope: 'public_profile,email'})\r\n        }\r\n    }\r\n\r\n    refreshToken = async () => {\r\n        this.stopRefreshTokenTimer();\r\n        try {\r\n            const user = await agent.Account.refreshToken();\r\n            runInAction(() => this.user = user);\r\n            store.commonStore.setToken(user.token);\r\n            this.startRefreshTokenTimer(user);\r\n        } catch(error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    private startRefreshTokenTimer(user: User) {\r\n        const jwtToken = JSON.parse(atob(user.token.split('.')[1]));\r\n        const expires = new Date(jwtToken.exp * 1000);\r\n        const timeout = expires.getTime() - Date.now() - (30 * 1000);\r\n        this.refreshTokenTimeout = setTimeout(this.refreshToken, timeout);\r\n    }\r\n\r\n    private stopRefreshTokenTimer() {\r\n        clearTimeout(this.refreshTokenTimeout);\r\n    }\r\n}","import { createContext, useContext } from \"react\";\r\nimport ActivityStore from \"./activityStore\";\r\nimport CommonStore from \"./commonStore\";\r\nimport ModalStore from \"./modalStore\";\r\nimport ProfileStore from \"./profileStore\";\r\nimport UserStore from \"./userStore\";\r\nimport CommentStore from \"./commentStore\";\r\n\r\ninterface Store {\r\n    activityStore: ActivityStore\r\n    commonStore: CommonStore,\r\n    userStore: UserStore,\r\n    modalStore: ModalStore,\r\n    profileStore: ProfileStore,\r\n    commentStore: CommentStore\r\n}\r\n\r\nexport const store: Store = {\r\n    activityStore: new ActivityStore(),\r\n    commonStore: new CommonStore(),\r\n    userStore: new UserStore(),\r\n    modalStore: new ModalStore(),\r\n    profileStore: new ProfileStore(),\r\n    commentStore: new CommentStore()\r\n}\r\n\r\nexport const StoreContext = createContext(store);\r\n\r\nexport function useStore() {\r\n    return useContext(StoreContext);\r\n}","import { makeAutoObservable, reaction } from \"mobx\";\r\nimport { ServerError } from \"../models/serverError\";\r\n\r\nexport default class CommonStore {\r\n    error: ServerError | null = null;\r\n    token: string | null = window.localStorage.getItem('jwt');\r\n    appLoaded = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.token,\r\n            token => {\r\n                if (token) {\r\n                    window.localStorage.setItem('jwt', token)\r\n                } else {\r\n                    window.localStorage.removeItem('jwt')\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setServerError = (error: ServerError) => {\r\n        this.error = error;\r\n    }\r\n\r\n    setToken = (token: string | null) => {\r\n        this.token = token;\r\n    }\r\n\r\n    setAppLoaded = () => {\r\n        this.appLoaded = true;\r\n    }\r\n}","import { makeAutoObservable } from \"mobx\"\r\n\r\ninterface Modal {\r\n    open: boolean;\r\n    body: JSX.Element | null;\r\n}\r\n\r\nexport default class ModalStore {\r\n    modal: Modal = {\r\n        open: false,\r\n        body: null\r\n    }\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    openModal = (content: JSX.Element) => {\r\n        this.modal.open = true;\r\n        this.modal.body = content;\r\n    }\r\n\r\n    closeModal = () => {\r\n        this.modal.open = false;\r\n        this.modal.body = null;\r\n    }\r\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from '@microsoft/signalr'\r\nimport { makeAutoObservable, runInAction } from 'mobx';\r\nimport { ChatComment } from \"../models/comment\";\r\nimport { store } from './store';\r\n\r\nexport default class CommonStore {\r\n    comments: ChatComment[] = [];\r\n    hubConnection: HubConnection | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    createHubConnection = (activityId: string) => {\r\n        if (store.activityStore.selectedActivity) {\r\n            this.hubConnection = new HubConnectionBuilder()\r\n                .withUrl(process.env.REACT_APP_CHAT_URL + '?activityId=' + activityId, {\r\n                    accessTokenFactory: () => store.userStore.user?.token!\r\n                })\r\n                .withAutomaticReconnect()\r\n                .configureLogging(LogLevel.Information)\r\n                .build();\r\n\r\n            this.hubConnection.start().catch(error => console.log('Error establishing the connection: ', error));\r\n\r\n            this.hubConnection.on('LoadComments', (comments: ChatComment[]) => {\r\n                runInAction(() => {\r\n                    comments.forEach(comment => {\r\n                        comment.createdAt = new Date(comment.createdAt + 'Z');\r\n                    })\r\n                    this.comments = comments;\r\n                })\r\n            });\r\n\r\n            this.hubConnection.on('ReceiveComment', (comment: ChatComment) => {\r\n                runInAction(() => {\r\n                    comment.createdAt = new Date(comment.createdAt);\r\n                    this.comments.unshift(comment);\r\n                });\r\n            })\r\n        }\r\n    }\r\n\r\n    stopHubConnection = () => {\r\n        this.hubConnection?.stop().catch(error => console.log('Error stopping connection: ', error));\r\n    }\r\n\r\n    clearComments = () => {\r\n        this.comments = [];\r\n        this.stopHubConnection();\r\n    }\r\n\r\n    addComment = async (values: any) => {\r\n        values.activityId = store.activityStore.selectedActivity?.id;\r\n        try {\r\n            await this.hubConnection?.invoke('SendComment', values);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport { Button, Container, Dropdown, Image, Menu } from 'semantic-ui-react';\r\nimport { useStore } from '../stores/store';\r\n\r\nexport default observer(function NavBar() {\r\n    const {userStore: {user, logout, isLoggedIn}} = useStore();\r\n    return (\r\n        <Menu inverted fixed='top'>\r\n            <Container>\r\n                <Menu.Item as={NavLink} to='/' exact header>\r\n                    <img src=\"/assets/logo.png\" alt=\"logo\" style={{marginRight: '10px'}}/>\r\n                    Reactivities\r\n                </Menu.Item>\r\n                {isLoggedIn &&\r\n                <>\r\n                    <Menu.Item as={NavLink} to='/activities' name='Activities'/>\r\n                    <Menu.Item as={NavLink} to='/errors' name='Errors'/>\r\n                    <Menu.Item>\r\n                        <Button as={NavLink} to='/create-activity' positive content='Create Activity'></Button>\r\n                    </Menu.Item>\r\n                    <Menu.Item position='right'>\r\n                        <Image src={user?.image || '/assets/user.png'} avatar spaced='right' />\r\n                        <Dropdown pointing='top left' text={user?.displayName}>\r\n                            <Dropdown.Menu>\r\n                                <Dropdown.Item as={Link} to={`/profiles/${user?.username}`} text='My Profile' icon='user' />\r\n                                <Dropdown.Item onClick={logout} text='Logout' icon='power' />\r\n                            </Dropdown.Menu>\r\n                        </Dropdown>\r\n                    </Menu.Item>\r\n                </>}\r\n            </Container>\r\n        </Menu>\r\n    )\r\n})","import { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport Calendar from 'react-calendar'\r\nimport { Header, Menu } from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/stores/store'\r\n\r\nexport default observer(function ActivityFilters() {\r\n    const {activityStore: {predicate, setPredicate}} = useStore();\r\n    return (\r\n        <>\r\n            <Menu vertical size='large' style={{width: '100%', marginTop: '28px'}}>\r\n                <Header icon='filter' attached color='teal' content='Filters' />\r\n                <Menu.Item\r\n                    content='All Activities'\r\n                    active={predicate.has('all')}\r\n                    onClick={() => setPredicate('all', 'true')}\r\n                />\r\n                <Menu.Item\r\n                    content=\"I'm going\"\r\n                    active={predicate.has('isGoing')}\r\n                    onClick={() => setPredicate('isGoing', 'true')}\r\n                />\r\n                <Menu.Item\r\n                    content=\"I'm hosting\"\r\n                    active={predicate.has('isHost')}\r\n                    onClick={() => setPredicate('isHost', 'true')}\r\n                />\r\n            </Menu>\r\n            <Header />\r\n            <Calendar\r\n                onChange={(date) => setPredicate('startDate', date as Date)}\r\n                value={predicate.get('startDate') || new Date()}\r\n            />\r\n        </>\r\n    )\r\n})","import { observer } from 'mobx-react-lite'\r\nimport React, { SyntheticEvent } from 'react'\r\nimport { Button, Reveal } from 'semantic-ui-react'\r\nimport { Profile } from '../../app/models/profile'\r\nimport { useStore } from '../../app/stores/store'\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function FollowButton({profile}: Props) {\r\n    const {profileStore, userStore} = useStore();\r\n    const {updateFollowing, loading} = profileStore;\r\n\r\n    if (userStore.user?.username === profile.username) return null;\r\n\r\n    function handleFollow(e: SyntheticEvent, username: string) {\r\n        e.preventDefault();\r\n        profile.following ? updateFollowing(username, false) : updateFollowing(username, true);\r\n    }\r\n\r\n    return (\r\n        <Reveal animated='move'>\r\n            <Reveal.Content visible style={{width: '100%'}}>\r\n                <Button\r\n                    fluid color='teal'\r\n                    content={profile.following ? 'Following' : 'Not following'} />\r\n            </Reveal.Content>\r\n            <Reveal.Content hidden style={{widht: '100%'}}>\r\n                <Button\r\n                    fluid\r\n                    basic\r\n                    color={profile.following ? 'red' : 'green'}\r\n                    content={profile.following ? 'Unfollow' : 'Follow'}\r\n                    loading={loading}\r\n                    onClick={(e) => handleFollow(e, profile.username)}\r\n                />\r\n            </Reveal.Content>\r\n        </Reveal>\r\n    )\r\n})","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Card, Icon, Image } from 'semantic-ui-react'\r\nimport { Profile } from '../../app/models/profile'\r\nimport FollowButton from './FollowButton';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default function ProfileCard({profile}: Props) {\r\n    function truncate(str: string | undefined) {\r\n        if (str) {\r\n            return str.length > 40 ? str.substring(0, 37) + '...' : str;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Card as={Link} to={`/profiles/${profile.username}`}>\r\n            <Image src={profile.image || '/assets/user.png'} />\r\n            <Card.Content>\r\n                <Card.Header>{profile.displayName}</Card.Header>\r\n                <Card.Description>{truncate(profile.bio)}</Card.Description>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n                <Icon name='user' />\r\n                {profile.followersCount}\r\n            </Card.Content>\r\n            <FollowButton profile={profile} />\r\n        </Card>\r\n    )\r\n}","import { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Image, List, Popup } from 'semantic-ui-react'\r\nimport { Profile } from '../../../app/models/profile'\r\nimport ProfileCard from '../../profiles/ProfileCard'\r\n\r\ninterface Props {\r\n    attendees: Profile[];\r\n}\r\n\r\nexport default observer(function ActivityListItemAttendee({attendees}: Props) {\r\n    const styles = {\r\n        borderColor: 'orange',\r\n        borderWidth: 3\r\n    }\r\n\r\n    return (\r\n        <List horizontal>\r\n            {attendees.map(attendee => (\r\n                <Popup\r\n                    hoverable\r\n                    key={attendee.username}\r\n                    trigger={\r\n                        <List.Item key={attendee.username} as={Link} to={`/profiles/${attendee.username}`}>\r\n                            <Image\r\n                                size='mini'\r\n                                circular\r\n                                src={attendee.image || '/assets/user.png'} \r\n                                bordered\r\n                                style={attendee.following ? styles : null }\r\n                            />\r\n                        </List.Item>\r\n                    }\r\n                >\r\n                    <Popup.Content>\r\n                        <ProfileCard profile={attendee} />\r\n                    </Popup.Content>\r\n                </Popup>\r\n            ))}\r\n        </List>\r\n    )\r\n})","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Icon, Item, Label, Segment } from 'semantic-ui-react';\r\nimport { Activity } from '../../../app/models/activity';\r\nimport { format } from 'date-fns';\r\nimport ActivityListItemAttendee from './ActivityListItemAttendee';\r\n\r\ninterface Props {\r\n    activity: Activity;\r\n}\r\n\r\nexport default function ActivityListItem ({activity}: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment>\r\n                {activity.isCancelled &&\r\n                    <Label attached='top' color='red' content='Cancelled' style={{textAlign: 'center'}} />\r\n                }\r\n                <Item.Group>\r\n                    <Item>\r\n                        <Item.Image style={{marginBottom: 5}} size='tiny' circular src={activity.host?.image || '/assets/user.png'} />\r\n                        <Item.Content>\r\n                            <Item.Header as={Link} to={`/activities/${activity.id}`}>\r\n                                {activity.title}\r\n                            </Item.Header>\r\n                            <Item.Description>Hosted by <Link to={`/profiles/${activity.hostUsername}`}>{activity.host?.displayName}</Link></Item.Description>\r\n                            {activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='orange'>You are hosting this activity</Label>\r\n                                </Item.Description>\r\n                            )}\r\n                            {activity.isGoing && !activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='green'>You are going to this activity</Label>\r\n                                </Item.Description>\r\n                            )}\r\n                        </Item.Content>\r\n                    </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment>\r\n                <span>\r\n                    <Icon name='clock' /> {format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n                    <Icon name='marker' /> {activity.venue}\r\n                </span>\r\n            </Segment>\r\n            <Segment secondary>\r\n                <ActivityListItemAttendee attendees={activity.attendees!} />\r\n            </Segment>\r\n            <Segment clearing>\r\n                <span>{activity.description}</span>\r\n                <Button\r\n                    as={Link}\r\n                    to={`/activities/${activity.id}`}\r\n                    color='teal'\r\n                    floated='right'\r\n                    content='View'\r\n                />\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport { Fragment } from 'react';\r\nimport { Header } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityListItem from './ActivityListItem';\r\n\r\nexport default observer(function ActivityList() {\r\n    const {activityStore} = useStore();\r\n    const {groupedActivities} = activityStore;\r\n\r\n    return (\r\n        <>\r\n            {groupedActivities.map(([group, activities]) => (\r\n                <Fragment key={group}>\r\n                    <Header sub color='teal'>\r\n                        {group}\r\n                    </Header>\r\n                    {activities.map(activity => (\r\n                        <ActivityListItem key={activity.id} activity={activity} />\r\n                    ))}\r\n                </Fragment>\r\n            ))}\r\n        </>\r\n    )\r\n})","import React, { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\n\r\nexport default function ActivityListItemPlaceholder() {\r\n    return (\r\n        <Fragment>\r\n            <Placeholder fluid style={{ marginTop: 25 }}>\r\n                <Segment.Group>\r\n                    <Segment style={{ minHeight: 110 }}>\r\n                        <Placeholder>\r\n                            <Placeholder.Header image>\r\n                                <Placeholder.Line />\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Header>\r\n                            <Placeholder.Paragraph>\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Paragraph>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment secondary style={{ minHeight: 70 }} />\r\n                    <Segment clearing>\r\n                        <Button disabled color='blue' floated='right' content='View' />\r\n                    </Segment>\r\n                </Segment.Group>\r\n            </Placeholder>\r\n        </Fragment>\r\n    );\r\n};","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect, useState } from 'react';\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\nimport { Grid, Loader } from 'semantic-ui-react';\r\nimport { PagingParams } from '../../../app/models/pagination';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityFilters from './ActivityFilters';\r\nimport ActivityList from './ActivityList';\r\nimport ActivityListItemPlaceholder from './ActivityListItemPlaceholder';\r\n\r\nexport default observer(function ActivityDashboard() {\r\n    const {activityStore} = useStore();\r\n    const {loadActivities, activityRegistry, loadingInitial, setPagingParams, pagination} = activityStore;\r\n    const [loadingNext, setLoadingNext] = useState(false);\r\n\r\n    function handleGetNext() {\r\n        setLoadingNext(true);\r\n        setPagingParams(new PagingParams(pagination!.currentPage + 1))\r\n        loadActivities().then(() => setLoadingNext(false))\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (activityRegistry.size <= 1) loadActivities();\r\n    }, [activityRegistry.size, loadActivities])\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width='10'>\r\n                {loadingInitial && !loadingNext ? (\r\n                    <>\r\n                        <ActivityListItemPlaceholder />\r\n                        <ActivityListItemPlaceholder />\r\n                    </>\r\n                ) : (\r\n                    <InfiniteScroll\r\n                        pageStart={0}\r\n                        loadMore={handleGetNext}\r\n                        hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\r\n                        initialLoad={false}\r\n                    >\r\n                        <ActivityList />\r\n                    </InfiniteScroll>\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width='6'>\r\n                <ActivityFilters />\r\n            </Grid.Column>\r\n            <Grid.Column width={10}>\r\n                <Loader active={loadingNext} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    type?: string;\r\n    label?: string;\r\n}\r\n\r\nexport default function TextInput(props: Props) {\r\n    const [field, meta] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <input {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import { ErrorMessage, Form, Formik } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Button, Header, Label } from 'semantic-ui-react';\r\nimport TextInput from '../../app/common/form/TextInput';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\nexport default observer(function LoginForm() {\r\n    const {userStore} = useStore();\r\n    return (\r\n        <Formik\r\n            initialValues={{email: '', password: '', error: null}}\r\n            onSubmit={(values, {setErrors}) => userStore.login(values).catch(error =>\r\n                setErrors({error: error.response.data}))}\r\n        >\r\n            {({handleSubmit, isSubmitting, errors}) => (\r\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Login to Reactivities' color='teal' textAlign='center' />\r\n                    <TextInput name='email' placeholder='Email' />\r\n                    <TextInput name='password' placeholder='Password' type='password' />\r\n                    <ErrorMessage\r\n                        name='error' render={() =>\r\n                            <Label style={{marginBottom: 10}} basic color='red' content={errors.error} />}\r\n                    />\r\n                    <Button loading={isSubmitting} positive content='Login' type='submit' fluid />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import React from 'react';\r\nimport { Message } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    errors: any;\r\n}\r\n\r\nexport default function ValidationErrors({errors}: Props) {\r\n    return (\r\n        <Message error>\r\n            {errors && (\r\n                <Message.List>\r\n                    {errors.map((err: any, i: any) => (\r\n                        <Message.Item key={i}>{err}</Message.Item>\r\n                    ))}\r\n                </Message.List>\r\n            )}\r\n        </Message>\r\n    )\r\n}","import { ErrorMessage, Form, Formik } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Button, Header } from 'semantic-ui-react';\r\nimport TextInput from '../../app/common/form/TextInput';\r\nimport { useStore } from '../../app/stores/store';\r\nimport * as Yup from 'yup';\r\nimport ValidationErrors from '../errors/ValidationErrors';\r\n\r\nexport default observer(function RegisterForm() {\r\n    const {userStore} = useStore();\r\n    return (\r\n        <Formik\r\n            initialValues={{displayName: '', username: '', email: '', password: '', error: null}}\r\n            onSubmit={(values, {setErrors}) => userStore.register(values).catch(error =>\r\n                setErrors({error}))}\r\n            validationSchema={Yup.object({\r\n                displayName: Yup.string().required(),\r\n                username: Yup.string().required(),\r\n                email: Yup.string().required().email(),\r\n                password: Yup.string().required(),\r\n            })}\r\n        >\r\n            {({handleSubmit, isSubmitting, errors, isValid, dirty}) => (\r\n                <Form className='ui form error' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Sign up to Reactivities' color='teal' textAlign='center' />\r\n                    <TextInput name='displayName' placeholder='Display Name' />\r\n                    <TextInput name='username' placeholder='Username' />\r\n                    <TextInput name='email' placeholder='Email' />\r\n                    <TextInput name='password' placeholder='Password' type='password' />\r\n                    <ErrorMessage\r\n                        name='error' render={() =>\r\n                            <ValidationErrors errors={errors.error} />}\r\n                    />\r\n                    <Button disabled={!isValid || !dirty || isSubmitting} loading={isSubmitting} positive content='Register' type='submit' fluid />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Container, Header, Segment, Image, Button, Divider } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\nimport LoginForm from '../users/LoginForm';\r\nimport RegisterForm from '../users/RegisterForm';\r\n\r\nexport default observer(function HomePage() {\r\n    const {userStore, modalStore} = useStore();\r\n    const {fbLoading} = userStore;\r\n    return (\r\n        <Segment inverted textAlign='center' vertical className='masthead'>\r\n            <Container text>\r\n                <Header as='h1' inverted>\r\n                    <Image size='massive' src='/assets/logo.png' alt='logo' style={{marginBottom: 12}} />\r\n                    Reactivities\r\n                </Header>\r\n                {userStore.isLoggedIn ? (\r\n                    <>\r\n                        <Header as='h2' inverted content='Welcome to Reactivities' />\r\n                        <Button as={Link} to='/activities' size='huge' inverted>\r\n                            Go to Activities!\r\n                        </Button>\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                        <Button onClick={() => modalStore.openModal(<LoginForm />)} size='huge' inverted>\r\n                            Login!\r\n                        </Button>\r\n                        <Button onClick={() => modalStore.openModal(<RegisterForm />)} size='huge' inverted>\r\n                            Register!\r\n                        </Button>\r\n                        <Divider horizontal inverted>Or</Divider>\r\n                        <Button\r\n                            loading={fbLoading} \r\n                            size='huge'\r\n                            inverted\r\n                            color='facebook'\r\n                            content='Login with Facebook'\r\n                            onClick={userStore.facebookLogin}\r\n                        />\r\n                    </>\r\n                )}\r\n            </Container>\r\n        </Segment>\r\n    )\r\n})","import React from 'react';\r\nimport { Dimmer, Loader } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    inverted?: boolean;\r\n    content?: string;\r\n}\r\n\r\nexport default function LoadingComponent({inverted = true, content = 'Loading...'}: Props) {\r\n    return (\r\n        <Dimmer active={true} inverted={inverted}>\r\n            <Loader content={content} />\r\n        </Dimmer>\r\n    )\r\n}","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    rows: number;\r\n    label?: string;\r\n}\r\n\r\nexport default function TextArea(props: Props) {\r\n    const [field, meta] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <textarea {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label, Select } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    options: any;\r\n    label?: string;\r\n}\r\n\r\nexport default function SelectInput(props: Props) {\r\n    const [field, meta, helpers] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <Select\r\n                clearable\r\n                options={props.options}\r\n                value={field.value || null}\r\n                onChange={(e, d) => helpers.setValue(d.value)}\r\n                onBlur={() => helpers.setTouched(true)}\r\n                placeholder={props.placeholder}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","export const categoryOptions = [\r\n    {text: 'Drinks', value: 'drinks'},\r\n    {text: 'Culture', value: 'culture'},\r\n    {text: 'Film', value: 'film'},\r\n    {text: 'Food', value: 'food'},\r\n    {text: 'Music', value: 'music'},\r\n    {text: 'Travel', value: 'travel'}\r\n]","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label } from 'semantic-ui-react';\r\nimport DatePicker, {ReactDatePickerProps} from 'react-datepicker';\r\n\r\nexport default function DateInput(props: Partial<ReactDatePickerProps>) {\r\n    const [field, meta, helpers] = useField(props.name!);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <DatePicker\r\n                {...field}\r\n                {...props}\r\n                selected={(field.value && new Date(field.value)) || null}\r\n                onChange={value => helpers.setValue(value)}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport { useEffect, useState } from 'react';\r\nimport { useHistory, useParams } from 'react-router';\r\nimport { Button, Header, Segment } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponents';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport {v4 as uuid} from \"uuid\";\r\nimport { Link } from 'react-router-dom';\r\nimport { Formik, Form } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport TextInput from '../../../app/common/form/TextInput';\r\nimport TextArea from '../../../app/common/form/TextArea';\r\nimport SelectInput from '../../../app/common/form/SelectInput';\r\nimport { categoryOptions } from '../../../app/common/options/categoryOptions';\r\nimport DateInput from '../../../app/common/form/DateInput';\r\nimport { ActivityFormValues } from '../../../app/models/activity';\r\n\r\nexport default observer(function ActivityForm() {\r\n    const history = useHistory();\r\n    const {activityStore} = useStore();\r\n    const {createActivity, updateActivity, loadingInitial, loadActivity} = activityStore;\r\n    const {id} = useParams<{id: string}>();\r\n    const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\r\n\r\n    const validationSchema = Yup.object({\r\n        title: Yup.string().required('The activity title is required'),\r\n        description: Yup.string().required('The activity description is required'),\r\n        category: Yup.string().required(),\r\n        date: Yup.string().required('Date is required').nullable(),\r\n        venue: Yup.string().required(),\r\n        city: Yup.string().required(),\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (id) loadActivity(id).then(activity => setActivity(new ActivityFormValues(activity)))\r\n    }, [id, loadActivity])\r\n\r\n    function handleForSubmit(activity: ActivityFormValues) {\r\n        if (!activity.id) {\r\n            let newActivity = {\r\n                ...activity,\r\n                id: uuid()\r\n            };\r\n            createActivity(newActivity).then(() => history.push(`/activities/${newActivity.id}`));\r\n        } else {\r\n            updateActivity(activity).then(() => history.push(`/activities/${activity.id}`));\r\n        }\r\n    }\r\n\r\n    if (loadingInitial) return <LoadingComponent content='Loading activity...' />\r\n\r\n    return (\r\n        <Segment clearing>\r\n            <Header content='Activity Details' sub color='teal' />\r\n            <Formik\r\n                validationSchema={validationSchema}\r\n                enableReinitialize\r\n                initialValues={activity}\r\n                onSubmit={values => handleForSubmit(values)}>\r\n                {({handleSubmit, isValid, isSubmitting, dirty}) => (\r\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <TextInput name='title' placeholder='Title' />\r\n                    <TextArea rows={3} placeholder='Description' name='description' />\r\n                    <SelectInput options={categoryOptions} placeholder='Category' name='category' />\r\n                    <DateInput\r\n                        placeholderText='Date'\r\n                        name='date'\r\n                        showTimeSelect\r\n                        timeCaption='time'\r\n                        dateFormat='MMMM d, yyyy h:mm aa'\r\n                    />\r\n                    <Header content='Location Details' sub color='teal' />\r\n                    <TextInput placeholder='City' name='city' />\r\n                    <TextInput placeholder='Venue' name='venue' />\r\n                    <Button\r\n                        disabled={isSubmitting || !dirty || !isValid}\r\n                        loading={isSubmitting} floated='right'\r\n                        positive type='submit' content='Submit' />\r\n                    <Button as={Link} to='/activities' floated='right' type='button' content='Cancel' />\r\n                </Form>\r\n                )}\r\n            </Formik>\r\n            \r\n        </Segment>\r\n    )\r\n})","import { Formik, Form, Field, FieldProps } from 'formik'\r\nimport { observer } from 'mobx-react-lite'\r\nimport React, { useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport {Segment, Header, Comment, Loader} from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/stores/store'\r\nimport * as Yup from 'yup'\r\nimport { formatDistanceToNow } from 'date-fns'\r\n\r\ninterface Props {\r\n    activityId: string\r\n}\r\n\r\nexport default observer(function ActivityDetailedChat({activityId}: Props) {\r\n    const {commentStore} = useStore();\r\n\r\n    useEffect(() => {\r\n        if (activityId) {\r\n            commentStore.createHubConnection(activityId);\r\n        }\r\n        return () => {\r\n            commentStore.clearComments();\r\n        }\r\n    }, [commentStore, activityId])\r\n\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n                color='teal'\r\n                style={{border: 'none'}}\r\n            >\r\n                <Header>Chat about this event</Header>\r\n            </Segment>\r\n            <Segment attached clearing>\r\n                <Formik\r\n                    onSubmit={(values, {resetForm}) => commentStore.addComment(values).then(() => resetForm())}\r\n                    initialValues={{body: ''}}\r\n                    validationSchema={Yup.object({\r\n                        body: Yup.string().required()\r\n                    })}\r\n                >\r\n                    {({isSubmitting, isValid, handleSubmit}) => (\r\n                        <Form className='ui form'>\r\n                            <Field name='body'>\r\n                                {(props: FieldProps) => (\r\n                                    <div style={{position: 'relative'}}>\r\n                                        <Loader active={isSubmitting} />\r\n                                        <textarea\r\n                                            placeholder='Enter your comment (Enter to submit, SHIFT + Enter for new line)'\r\n                                            rows={2}\r\n                                            {...props.field}\r\n                                            onKeyPress={e => {\r\n                                                if (e.key === 'Enter' && e.shiftKey) {\r\n                                                    return;\r\n                                                }\r\n                                                if (e.key === 'Enter' && !e.shiftKey) {\r\n                                                    e.preventDefault();\r\n                                                    isValid && handleSubmit();\r\n                                                }\r\n                                            }}\r\n                                        />\r\n                                    </div>\r\n                                )}\r\n                            </Field>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n                <Comment.Group>\r\n                    {commentStore.comments.map(comment =>\r\n                        <Comment key={comment.id}>\r\n                            <Comment.Avatar src= {comment.image || '/assets/user.png'} />\r\n                            <Comment.Content>\r\n                                <Comment.Author as={Link} to={`/profiles/${comment.username}`}>\r\n                                    {comment.displayName}\r\n                                </Comment.Author>\r\n                                <Comment.Metadata>\r\n                                    <div>{formatDistanceToNow(comment.createdAt)} ago</div>\r\n                                </Comment.Metadata>\r\n                                <Comment.Text style={{whiteSpace: 'pre-wrap'}}>{comment.body}</Comment.Text>\r\n                            </Comment.Content>\r\n                        </Comment>\r\n                    )}\r\n                </Comment.Group>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport {Button, Header, Item, Segment, Image, Label} from 'semantic-ui-react'\r\nimport {Activity} from \"../../../app/models/activity\";\r\nimport {format} from 'date-fns';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nconst activityImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer (function ActivityDetailedHeader({activity}: Props) {\r\n    const {activityStore: {updateAttendence, loading, cancelActivityToggle}} = useStore();\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{padding: '0'}}>\r\n                {activity.isCancelled &&\r\n                    <Label style={{position: 'absolute', zIndex: 1000, left: -14, top: 20}}\r\n                        ribbon color='red' content='Cancelled' />\r\n                }\r\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle}/>\r\n                <Segment style={activityImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={activity.title}\r\n                                    style={{color: 'white'}}\r\n                                />\r\n                                <p>{format(activity.date!, 'dd MMM yyyy')}</p>\r\n                                <p>\r\n                                    Hosted by <strong><Link to={`/profiles/${activity.host?.username}`}>{activity.host?.displayName}</Link></strong>\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                {activity.isHost ? (\r\n                    <>\r\n                        <Button\r\n                            color={activity.isCancelled ? 'green' : 'red'}\r\n                            floated='left'\r\n                            basic\r\n                            content={activity.isCancelled ? 'Re-activate Activity' : 'Cancel Activity'}\r\n                            onClick={cancelActivityToggle}\r\n                            loading={loading}\r\n                        />\r\n                        <Button as={Link} \r\n                            disabled={activity.isCancelled}\r\n                            to={`/manage/${activity.id}`}\r\n                            color='orange'\r\n                            floated='right'>\r\n                            Manage Event\r\n                        </Button>\r\n                    </>\r\n                ) : activity.isGoing ? (\r\n                    <Button loading={loading} onClick={updateAttendence}>Cancel attendance</Button>\r\n                ) : (\r\n                    <Button\r\n                        disabled={activity.isCancelled}\r\n                        loading={loading}\r\n                        onClick={updateAttendence}\r\n                        color='teal'>\r\n                            Join Activity\r\n                        </Button>\r\n                )}\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\r\nimport {Activity} from \"../../../app/models/activity\";\r\nimport {format} from 'date-fns';\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedInfo({activity}: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{activity.description}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n            <span>\r\n              {format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n            </span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={11}>\r\n                        <span>{activity.venue}, {activity.city}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import React from 'react'\r\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { Activity } from '../../../app/models/activity'\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedSidebar ({activity: {attendees, host}}: Props) {\r\n    if (!attendees) return null;\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{ border: 'none' }}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'\r\n            >\r\n                {attendees.length} {attendees.length === 1 ? 'Person' : 'People'} going\r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    {attendees.map(attendee => (\r\n                        <Item style={{ position: 'relative' }} key={attendee.username}>\r\n                            {attendee.username === host?.username &&\r\n                                <Label\r\n                                    style={{ position: 'absolute' }}\r\n                                    color='orange'\r\n                                    ribbon='right'\r\n                                >\r\n                                    Host\r\n                                </Label>}\r\n                            <Image size='tiny' src={attendee.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Item.Header as='h3'>\r\n                                    <Link to={`/profiles/${attendee.username}`}>{attendee.displayName}</Link>\r\n                                </Item.Header>\r\n                                {attendee.following &&\r\n                                <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>}\r\n                            </Item.Content>\r\n                        </Item>\r\n                    ))}\r\n                </List>\r\n            </Segment>\r\n        </>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport { useEffect } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponents';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityDetailedChat from './ActivityDetailedChat';\r\nimport ActivityDetailedHeader from './ActivityDetailedHeader';\r\nimport ActivityDetailedInfo from './ActivityDetailedInfo';\r\nimport ActivityDetailedSidebar from './ActivityDetailedSidebar';\r\n\r\nexport default observer(function ActivityDetails() {\r\n    const {activityStore} = useStore();\r\n    const {selectedActivity: activity, loadActivity, loadingInitial, clearSelectedActivity} = activityStore;\r\n    const {id} = useParams<{id: string}>();\r\n\r\n    useEffect(() => {\r\n        if (id) loadActivity(id);\r\n        return () => clearSelectedActivity();\r\n    }, [id, loadActivity, clearSelectedActivity]);\r\n\r\n    if (loadingInitial || !activity) return <LoadingComponent />;\r\n\r\n    return(\r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n                <ActivityDetailedHeader activity={activity} />\r\n                <ActivityDetailedInfo activity={activity} />\r\n                <ActivityDetailedChat activityId={activity.id} />\r\n            </Grid.Column>\r\n            <Grid.Column width={6}>\r\n                <ActivityDetailedSidebar activity={activity} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import React, { useState } from 'react';\r\nimport {Button, Header, Segment} from \"semantic-ui-react\";\r\nimport axios from 'axios';\r\nimport ValidationErrors from './ValidationErrors';\r\n\r\nexport default function TestErrors() {\r\n    const baseUrl = process.env.REACT_APP_API_URL;\r\n    const [errors, setErrors] = useState(null)\r\n\r\n    function handleNotFound() {\r\n        axios.get(baseUrl + '/buggy/not-found').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadRequest() {\r\n        axios.get(baseUrl + '/buggy/bad-request').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleServerError() {\r\n        axios.get(baseUrl + '/buggy/server-error').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleUnauthorised() {\r\n        axios.get(baseUrl + '/buggy/unauthorised').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadGuid() {\r\n        axios.get(baseUrl + '/activities/notaguid').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleValidationError() {\r\n        axios.post(baseUrl + '/activities', {}).catch(err => setErrors(err));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header as='h1' content='Test Error component' />\r\n            <Segment>\r\n                <Button.Group widths='7'>\r\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\r\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\r\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\r\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\r\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\r\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\r\n                </Button.Group>\r\n            </Segment>\r\n            {errors &&\r\n                <ValidationErrors errors={errors} />\r\n            }\r\n        </>\r\n    )\r\n}","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react';\r\n\r\nexport default function NotFound() {\r\n    return (\r\n        <Segment placeholder>\r\n            <Header icon>\r\n                <Icon name='search' />\r\n                Oops - We've looked everywhere and could not find this.\r\n            </Header>\r\n            <Segment.Inline>\r\n                <Button as={Link} to='/activities' primary>\r\n                    Return to activities page\r\n                </Button>\r\n            </Segment.Inline>\r\n        </Segment>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Container, Header, Segment } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\nexport default observer(function ServerError() {\r\n    const {commonStore} = useStore();\r\n    return (\r\n        <Container>\r\n            <Header as='h1' content='Server Error' />\r\n            <Header sub as='h5' color='red' content={commonStore.error?.message} />\r\n            {commonStore.error?.details &&\r\n                <Segment>\r\n                    <Header as='h4' content='Stack trace' color='teal' />\r\n                    <code style={{marginTop: '10px'}}>{commonStore.error.details}</code>\r\n                </Segment>\r\n            }\r\n        </Container>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Modal } from 'semantic-ui-react';\r\nimport { useStore } from '../../stores/store';\r\n\r\nexport default observer(function ModalContainer() {\r\n    const {modalStore} = useStore();\r\n    return (\r\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size='mini'>\r\n            <Modal.Content>\r\n                {modalStore.modal.body}\r\n            </Modal.Content>\r\n        </Modal>\r\n    )\r\n})","import { Form, Formik } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { useStore } from '../../app/stores/store';\r\nimport * as Yup from 'yup';\r\nimport { Button } from 'semantic-ui-react';\r\nimport TextInput from '../../app/common/form/TextInput';\r\nimport TextArea from '../../app/common/form/TextArea';\r\n\r\ninterface Props {\r\n    setEditMode: (editMode: boolean) => void;\r\n}\r\n\r\nexport default observer(function ProfileEditForm({setEditMode}: Props) {\r\n    const {profileStore: {profile, updateProfile}} = useStore();\r\n    return (\r\n        <Formik\r\n            initialValues={{displayName: profile?.displayName, bio: profile?.bio}}\r\n            onSubmit={values => {\r\n                updateProfile(values).then(() => {\r\n                    setEditMode(false);\r\n                })\r\n            }}\r\n            validationSchema={Yup.object({\r\n                displayName: Yup.string().required()\r\n            })}\r\n        >\r\n            {({isSubmitting, isValid, dirty}) => (\r\n                <Form className='ui form'>\r\n                    <TextInput name='displayName' placeholder='Display Name' />\r\n                    <TextArea rows={3} name='bio' placeholder='Add your bio' />\r\n                    <Button\r\n                        disabled={!isValid || !dirty}\r\n                        loading={isSubmitting}\r\n                        positive\r\n                        content='Update Profile'\r\n                        type='submit'\r\n                        floated='right'\r\n                    />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React, { useState } from 'react';\r\nimport { Button, Grid, Header, Tab } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\nimport ProfileEditForm from './ProfileEditForm';\r\n\r\nexport default observer(function ProfileAbout() {\r\n    const {profileStore: {isCurrentUser, profile}} = useStore();\r\n    const [editMode, setEditMode] = useState(false);\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='user' content={`About ${profile?.displayName}`} />\r\n                    {isCurrentUser && (\r\n                        <Button\r\n                            floated='right'\r\n                            basic\r\n                            content={editMode ? 'Cancel' : 'Edit Profile'}\r\n                            onClick={() => setEditMode(!editMode)}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    {editMode ? <ProfileEditForm setEditMode={setEditMode} /> \r\n                    : <span style={{whiteSpace: 'pre-wrap'}}>{profile?.bio}</span>}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React, { SyntheticEvent, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Card, Grid, GridColumn, Header, Image, Tab, TabProps } from 'semantic-ui-react';\r\nimport { UserActivity } from '../../app/models/profile';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\nconst panes = [\r\n    { menuItem: 'Future Events', pane: { key: 'future' } },\r\n    { menuItem: 'Past Events', pane: { key: 'past' } },\r\n    { menuItem: 'Hosting', pane: { key: 'hosting' } },\r\n];\r\n\r\nexport default observer(function ProfileActivities() {\r\n    const {profileStore} = useStore();\r\n    const {\r\n        loadUserActivities,\r\n        profile,\r\n        loadingActivities,\r\n        userActivities\r\n    } = profileStore;\r\n\r\n    useEffect(() => {\r\n        loadUserActivities(profile!.username);\r\n    }, [loadUserActivities, profile]);\r\n\r\n    const handleTabChange = (e: SyntheticEvent, data: TabProps) => {\r\n        loadUserActivities(profile!.username, panes[data.activeIndex as number].pane.key);\r\n    };\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingActivities}>\r\n            <Grid>\r\n                <GridColumn width={16}>\r\n                    <Header floated='left' icon='calendar' content={'Activities'} />\r\n                </GridColumn>\r\n                <Grid.Column width={16}>\r\n                    <Tab\r\n                        panes={panes}\r\n                        menu={{secondary: true, pointing: true}}\r\n                        onTabChange={(e, data) => handleTabChange(e, data)}\r\n                    />\r\n                    <br />\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {userActivities.map((activity: UserActivity) => (\r\n                            <Card\r\n                                as={Link}\r\n                                to={`/activities/${activity.id}`}\r\n                                key={activity.id}\r\n                            >\r\n                                <Image\r\n                                    src={`/assets/categoryImages/${activity.category}.jpg`}\r\n                                    style={{minHeight: 100, objectFit: 'cover'}}\r\n                                />\r\n                                <Card.Content>\r\n                                    <Card.Header textAlign='center'>{activity.title}</Card.Header>\r\n                                    <Card.Meta textAlign='center'>\r\n                                        <div>{format(new Date(activity.date), 'do LLL')}</div>\r\n                                        <div>{format(new Date(activity.date), 'h:mm a')}</div>\r\n                                    </Card.Meta>\r\n                                </Card.Content>\r\n                            </Card>\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { Card, Grid, Header, Tab } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store'\r\nimport ProfileCard from './ProfileCard';\r\n\r\nexport default observer(function ProfileFollowings() {\r\n    const {profileStore} = useStore();\r\n    const {profile, followings, loadingFollowings, activeTab} = profileStore;\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingFollowings}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='user'\r\n                    content={activeTab === 3 ? `People following ${profile?.displayName}` : `People ${profile?.displayName} is following`} />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {followings.map(profile => (\r\n                            <ProfileCard key={profile.username} profile={profile} />\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import React from 'react';\r\nimport { Cropper } from 'react-cropper';\r\nimport 'cropperjs/dist/cropper.css';\r\n\r\ninterface Props {\r\n    imagePreview: string;\r\n    setCropper: (cropper: Cropper) => void;\r\n}\r\n\r\nexport default function PhotoWidgetCropper({imagePreview, setCropper}: Props) {\r\n    return (\r\n        <Cropper\r\n            src={imagePreview}\r\n            style={{height: 200, width: '100%'}}\r\n            initialAspectRatio={1}\r\n            aspectRatio={1}\r\n            preview='.img-preview'\r\n            guides={false}\r\n            viewMode={1}\r\n            autoCropArea={1}\r\n            background={false}\r\n            onInitialized={cropper => setCropper(cropper)}\r\n        />\r\n    )\r\n}","import React, {useCallback} from 'react'\r\nimport {useDropzone} from 'react-dropzone'\r\nimport { Header, Icon } from 'semantic-ui-react'\r\n\r\ninterface Props {\r\n    setFiles: (files: any) => void;\r\n}\r\n\r\nexport default function PhotoWidgetDropzone({setFiles}: Props) {\r\n    const dzStyles = {\r\n        border: 'dashed 3px #eee',\r\n        borderColor: '#eee',\r\n        borderRadius: '5px',\r\n        paddingTop: '30px',\r\n        textAlign: 'center' as 'center',\r\n        height: 200\r\n    }\r\n\r\n    const dzActive = {\r\n        borderColor: 'green'\r\n    }\r\n\r\n    const onDrop = useCallback(acceptedFiles => {\r\n        setFiles(acceptedFiles.map((file: any) => Object.assign(file, {\r\n            preview: URL.createObjectURL(file)\r\n        })))\r\n    }, [setFiles])\r\n    const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\r\n\r\n    return (\r\n        <div style={isDragActive ? {...dzStyles, ...dzActive} : dzStyles} {...getRootProps()}>\r\n            <input {...getInputProps()} />\r\n            <Icon name='upload' size='huge' />\r\n            <Header content='Drop image here' />\r\n        </div>\r\n    )\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { Button, Grid, Header } from 'semantic-ui-react';\r\nimport PhotoWidgetCropper from './PhotoWidgetCropper';\r\nimport PhotoWidgetDropzone from './PhotoWidgetDropzone';\r\n\r\ninterface Props {\r\n    loading: boolean;\r\n    uploadPhoto: (file: Blob) => void;\r\n}\r\n\r\nexport default function PhotoUploadWidget({loading, uploadPhoto}: Props) {\r\n    const [files, setFiles] = useState<any>([]);\r\n    const [cropper, setCropper] = useState<Cropper>();\r\n\r\n    function onCrop() {\r\n        if (cropper) {\r\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!));\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            files.forEach((file: any) => URL.revokeObjectURL(file.preview))\r\n        }\r\n    }, [files])\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 1 - Add Photo' />\r\n                <PhotoWidgetDropzone setFiles={setFiles} />\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 2 - Resize image' />\r\n                {files && files.length > 0 && (\r\n                    <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview} />\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 3 - Preview & Upload' />\r\n                {files && files.length > 0 &&\r\n                <>\r\n                    <div className='img-preview' style={{minHeight: 200, overflow: 'hidden'}} />\r\n                    <Button.Group widths={2}>\r\n                        <Button loading={loading} onClick={onCrop} positive icon='check' />\r\n                        <Button disabled={loading} onClick={() => setFiles([])} icon='close' />\r\n                    </Button.Group>\r\n                </>}\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}","import { observer } from 'mobx-react-lite'\r\nimport React, { SyntheticEvent, useState } from 'react'\r\nimport { Button, Card, Grid, Header, Image, Tab } from 'semantic-ui-react'\r\nimport PhotoUploadWidget from '../../app/common/imageUpload/PhotoUploadWidget'\r\nimport { Photo, Profile } from '../../app/models/profile'\r\nimport { useStore } from '../../app/stores/store'\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfilePhotos({profile}: Props) {\r\n    const {profileStore: {isCurrentUser, uploadPhoto, uploading,\r\n        loading, setMainPhoto, deletePhoto}} = useStore();\r\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\r\n    const [target, setTarget] = useState('');\r\n\r\n    function handlePhotoUpload(file: Blob) {\r\n        uploadPhoto(file).then(() => setAddPhotoMode(false));\r\n    }\r\n\r\n    function handleSetNamePhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n        setMainPhoto(photo);\r\n    }\r\n\r\n    function handleDeletePhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n        deletePhoto(photo);\r\n    }\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='image' content='Photos' />\r\n                    {isCurrentUser && (\r\n                        <Button floated='right' basic\r\n                            content={addPhotoMode ? 'Cancel' : 'Add Photo'}\r\n                            onClick={() => setAddPhotoMode(!addPhotoMode)} />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    {addPhotoMode ? (\r\n                        <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={uploading} />\r\n                    ) : (\r\n                        <Card.Group itemsPerRow={5}>\r\n                            {profile.photos?.map(photo => (\r\n                                <Card key={photo.id}>\r\n                                    <Image src={photo.url} />\r\n                                    {isCurrentUser && (\r\n                                        <Button.Group fluid widths={2}>\r\n                                            <Button\r\n                                                basic\r\n                                                color='green'\r\n                                                content='Main'\r\n                                                name={'main' + photo.id}\r\n                                                disabled={photo.isMain}\r\n                                                loading={target === 'main' + photo.id && loading}\r\n                                                onClick={e => handleSetNamePhoto(photo, e)}\r\n                                            />\r\n                                            <Button\r\n                                                basic\r\n                                                color='red'\r\n                                                icon='trash'\r\n                                                name={photo.id}\r\n                                                loading={target === photo.id && loading}\r\n                                                onClick={e => handleDeletePhoto(photo, e)}\r\n                                                disabled={photo.isMain}\r\n                                            />\r\n                                        </Button.Group>\r\n                                    )}\r\n                                </Card>\r\n                            ))}\r\n                        </Card.Group>\r\n                    )}\r\n                </Grid.Column>\r\n            </Grid>\r\n            \r\n        </Tab.Pane>\r\n    )\r\n})","import { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { Tab } from 'semantic-ui-react'\r\nimport { Profile } from '../../app/models/profile'\r\nimport { useStore } from '../../app/stores/store'\r\nimport ProfileAbout from './ProfileAbout'\r\nimport ProfileActivities from './ProfileActivities'\r\nimport ProfileFollowings from './ProfileFollowings'\r\nimport ProfilePhotos from './ProfilePhotos'\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileContent({profile}: Props) {\r\n    const {profileStore} = useStore();\r\n\r\n    const panes = [\r\n        {menuItem: 'About', render: () => <ProfileAbout />},\r\n        {menuItem: 'Photos', render: () => <ProfilePhotos profile={profile} />},\r\n        {menuItem: 'Events', render: () => <ProfileActivities />},\r\n        {menuItem: 'Followers', render: () => <ProfileFollowings />},\r\n        {menuItem: 'Following', render: () => <ProfileFollowings />},\r\n    ]\r\n\r\n    return (\r\n        <Tab\r\n            menu={{fluid: true, vertical: true}}\r\n            menuPosition='right'\r\n            panes={panes}\r\n            onTabChange={(e, data) => profileStore.setActiveTab(data.activeIndex)}\r\n        />\r\n    )\r\n})","import { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { Divider, Grid, Header, Item, Segment, Statistic } from 'semantic-ui-react'\r\nimport { Profile } from '../../app/models/profile'\r\nimport FollowButton from './FollowButton'\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileHeader({profile}: Props) {\r\n    return (\r\n        <Segment>\r\n            <Grid>\r\n                <Grid.Column width={12}>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Image avatar size='small' src={profile?.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Header as='h1' content={profile?.displayName} />\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Grid.Column>\r\n                <Grid.Column width={4}>\r\n                    <Statistic.Group widths={2}>\r\n                        <Statistic label='Followers' value={profile.followersCount} />\r\n                        <Statistic label='Following' value={profile.followingCount} />\r\n                    </Statistic.Group>\r\n                    <Divider />\r\n                    <FollowButton profile={profile} />\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    )\r\n})","import { observer } from 'mobx-react-lite'\r\nimport React, { useEffect } from 'react'\r\nimport { useParams } from 'react-router'\r\nimport { Grid } from 'semantic-ui-react'\r\nimport LoadingComponent from '../../app/layout/LoadingComponents'\r\nimport { useStore } from '../../app/stores/store'\r\nimport ProfileContent from './ProfileContent'\r\nimport ProfileHeader from './ProfileHeader'\r\n\r\nexport default observer(function ProfilePage() {\r\n    const {username} = useParams<{username: string}>();\r\n    const {profileStore} = useStore();\r\n    const {loadingProfile, loadProfile, profile, setActiveTab} = profileStore;\r\n\r\n    useEffect(() => {\r\n        loadProfile(username);\r\n        return () => {\r\n            setActiveTab(0);\r\n        }\r\n    }, [loadProfile, username, setActiveTab])\r\n\r\n    if (loadingProfile) return <LoadingComponent content='Loading profile...' />\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={16}>\r\n                {profile &&\r\n                <>\r\n                    <ProfileHeader profile={profile} />\r\n                    <ProfileContent profile={profile} />\r\n                </>}\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import { Redirect, Route, RouteComponentProps, RouteProps } from \"react-router\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\ninterface Props extends RouteProps {\r\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>\r\n}\r\n\r\nexport default function PrivateRoute({component: Component, ...rest}: Props) {\r\n    const {userStore: {isLoggedIn}} = useStore();\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to='/' />}\r\n        />\r\n    )\r\n}","import { useLocation } from \"react-router-dom\";\r\n\r\nexport default function useQuery() {\r\n    return new URLSearchParams(useLocation().search);\r\n}","import React from 'react';\r\nimport { toast } from 'react-toastify';\r\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react';\r\nimport agent from '../../app/api/agent';\r\nimport useQuery from '../../app/common/util/hooks';\r\n\r\nexport default function RegisterSuccess() {\r\n    const email = useQuery().get('email') as string;\r\n\r\n    function handleConfirmEmailResend() {\r\n        agent.Account.resendEmailConfirm(email).then(() => {\r\n            toast.success('Verification resend - please check your email');\r\n        }).catch(error => console.log(error));\r\n    }\r\n\r\n    return (\r\n        <Segment placeholder textAlign='center'>\r\n            <Header icon color='green'>\r\n                <Icon name='check' />\r\n                Successfully registered!\r\n            </Header>\r\n            <p>Please check your email (including junk email) for the verification email</p>\r\n            {email &&\r\n                <>\r\n                    <p>Didn't receive the email ? Click the below button to resend</p>\r\n                    <Button primary onClick={handleConfirmEmailResend} content='Resend email' size='huge' />\r\n                </>\r\n            }\r\n        </Segment>\r\n    )\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { toast } from 'react-toastify';\r\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react';\r\nimport agent from '../../app/api/agent';\r\nimport useQuery from '../../app/common/util/hooks';\r\nimport { useStore } from '../../app/stores/store';\r\nimport LoginForm from './LoginForm';\r\n\r\nexport default function ConfirmEmail() {\r\n    const {modalStore} = useStore();\r\n    const email = useQuery().get('email') as string;\r\n    const token = useQuery().get('token') as string;\r\n\r\n    const Status = {\r\n        Verifying: 'Verifying',\r\n        Failed: 'Failed',\r\n        Success: 'Success'\r\n    }\r\n\r\n    const [status, setStatus] = useState(Status.Verifying);\r\n\r\n    function handleConfirmEmailResend() {\r\n        agent.Account.resendEmailConfirm(email).then(() => {\r\n            toast.success('Verification resend - please check your email');\r\n        }).catch(error => console.log(error));\r\n    }\r\n\r\n    useEffect(() => {\r\n        agent.Account.verifyEmail(token, email).then(() => {\r\n            setStatus(Status.Success)\r\n        }).catch(() => {\r\n            setStatus(Status.Failed)\r\n        })\r\n    }, [Status.Failed, Status.Success, token, email])\r\n\r\n    function getBody() {\r\n        switch (status) {\r\n            case Status.Verifying:\r\n                return <p>Verifying...</p>\r\n            case Status.Failed:\r\n                return (\r\n                    <div>\r\n                        <p>Verification failed. You can try resending the verify link to your email</p>\r\n                        <Button primary onClick={handleConfirmEmailResend} size='huge' content='Resend email' />\r\n                    </div>\r\n                );\r\n            case Status.Success:\r\n                return (\r\n                    <div>\r\n                        <p>Email has been verified - you can now login</p>\r\n                        <Button primary onClick={() => modalStore.openModal(<LoginForm />)} size='huge' content='Login' />\r\n                    </div>\r\n                );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Segment placeholder textAlign='center'>\r\n            <Header icon>\r\n                <Icon name='envelope' />\r\n                Email verification\r\n            </Header>\r\n            <Segment.Inline>\r\n                {getBody()}\r\n            </Segment.Inline>\r\n        </Segment>\r\n    )\r\n}","import React, { useEffect } from 'react';\r\nimport { Container } from 'semantic-ui-react';\r\nimport NavBar from './NavBar';\r\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Route, Switch, useLocation } from 'react-router';\r\nimport HomePage from '../../features/home/HomePage';\r\nimport ActivityForm from '../../features/activities/form/ActivityForm';\r\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\r\nimport TestErrors from '../../features/errors/TestError';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport NotFound from '../../features/errors/NotFound';\r\nimport ServerError from '../../features/errors/ServerError';\r\nimport { useStore } from '../stores/store';\r\nimport LoadingComponent from './LoadingComponents';\r\nimport ModalContainer from '../common/modals/ModalContainer';\r\nimport ProfilePage from '../../features/profiles/ProfilePage';\r\nimport PrivateRoute from './PrivateRoute';\r\nimport RegisterSuccess from '../../features/users/RegisterSuccess';\r\nimport ConfirmEmail from '../../features/users/ConfirmEmail';\r\n\r\nfunction App() {\r\n    const location = useLocation();\r\n    const {commonStore, userStore} = useStore();\r\n\r\n    useEffect(() => {\r\n        if (commonStore.token) {\r\n            userStore.getUser().finally(() => commonStore.setAppLoaded());\r\n        } else {\r\n            userStore.getFacebookLoginStatus().then(() => commonStore.setAppLoaded());\r\n        }\r\n    }, [commonStore, userStore])\r\n\r\n    if (!commonStore.appLoaded) return <LoadingComponent content='Loading app...' />\r\n\r\n    return (\r\n        <>\r\n        <ToastContainer position='bottom-right' hideProgressBar />\r\n        <ModalContainer />\r\n        <Route exact path='/' component={HomePage} />\r\n        <Route\r\n            path={'/(.+)'}\r\n            render={() => (\r\n                <>\r\n                    <NavBar />\r\n                    <Container style={{marginTop: '7em'}}>\r\n                        <Switch>\r\n                            <PrivateRoute exact path='/activities' component={ActivityDashboard} />\r\n                            <PrivateRoute path='/activities/:id' component={ActivityDetails} />\r\n                            <PrivateRoute key={location.key} path={['/create-activity', '/manage/:id']} component={ActivityForm} />\r\n                            <PrivateRoute path='/profiles/:username' component={ProfilePage} />\r\n                            <PrivateRoute path='/errors' component={TestErrors} />\r\n                            <Route path='/server-error' component={ServerError} />\r\n                            <Route path='/account/registerSuccess' component={RegisterSuccess} />\r\n                            <Route path='/account/verifyEmail' component={ConfirmEmail} />\r\n                            <Route component={NotFound} />\r\n                        </Switch>\r\n                    </Container>\r\n                </>\r\n            )}\r\n        />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default observer(App);\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport default function ScrollToTop() {\r\n  const { pathname } = useLocation();\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, [pathname]);\r\n\r\n  return null;\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport 'react-calendar/dist/Calendar.css';\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport './app/layout/styles.css';\nimport App from './app/layout/App';\nimport reportWebVitals from './reportWebVitals';\nimport { store, StoreContext } from './app/stores/store';\nimport { Router } from 'react-router-dom';\nimport { createBrowserHistory } from 'history';\nimport ScrollToTop from './app/layout/ScrollToTop';\n\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n    // <React.StrictMode>\n    <StoreContext.Provider value={store}>\n        <Router history={history}>\n            <ScrollToTop />\n            <App />\n        </Router>\n    </StoreContext.Provider>,\n    // </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}